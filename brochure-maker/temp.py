from collections import Counter
from urllib.parse import urlparse
import re

def filter_relevant_links(link_list):
    # Define common keywords in the URL
    print(f"from {len(link_list)} urls")
    common_keywords = ['company', 'about', 'contact', 'support', 'team', 'careers', 'contact']
    # Calculate a relevance score based on the number of common keywords found in the URL path
    scores = {link: sum(1 for keyword in common_keywords if re.search(r'\b' + keyword + r'\b', urlparse(link).path)) for link in link_list}
    print(scores)
    # Sort links by their relevance score and filter out top-scoring links until we reach a certain number of links
    num_relevant_links = int(len(link_list) * 0.2)  # Calculate the percentage of relevant links to keep
    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    filtered_links = [link for link, score in sorted_scores[:num_relevant_links]]
    print(f"to {len(filtered_links)} urls")
    return filtered_links

urls = ['/',
 '/langchain',
 '/langsmith',
 '/langgraph',
 '/retrieval',
 '/agents',
 '/evaluation',
 'https://blog.langchain.dev/',
 '/customers',
 'https://academy.langchain.com/',
 '/community',
 '/experts',
 'https://changelog.langchain.com/',
 '/testing-guide-ebook',
 '/stateofaiagents',
 '/breakoutagents',
 'https://python.langchain.com/docs/introduction/',
 'https://docs.smith.langchain.com/',
 'https://langchain-ai.github.io/langgraph/tutorials/introduction/',
 'https://js.langchain.com/docs/introduction/',
 'https://docs.smith.langchain.com/',
 'https://langchain-ai.github.io/langgraphjs/tutorials/quickstart/',
 '/about',
 '/careers',
 '/pricing-langsmith',
 '/pricing-langgraph-platform',
 '/contact-sales',
 'https://smith.langchain.com/',
 '/',
 '/langchain',
 '/langsmith',
 '/langgraph',
 '/retrieval',
 '/agents',
 '/evaluation',
 'https://blog.langchain.dev/',
 '/customers',
 'https://academy.langchain.com/',
 '/community',
 '/experts',
 'https://changelog.langchain.com/',
 '/testing-guide-ebook',
 '/stateofaiagents',
 '/breakoutagents',
 'https://python.langchain.com/docs/introduction/',
 'https://docs.smith.langchain.com/',
 'https://langchain-ai.github.io/langgraph/tutorials/introduction/',
 'https://js.langchain.com/docs/introduction/',
 'https://docs.smith.langchain.com/',
 'https://langchain-ai.github.io/langgraphjs/tutorials/quickstart/',
 '/about',
 '/careers',
 '/pricing-langsmith',
 '/pricing-langgraph-platform',
 '/contact-sales',
 'https://smith.langchain.com/',
 '/contact-sales',
 'https://smith.langchain.com/',
 '/langchain',
 '/langgraph',
 '/langsmith',
 '/langchain',
 '/contact-sales',
 'https://smith.langchain.com/',
 '/customers',
 'https://blog.langchain.dev/ally-financial-collaborates-with-langchain-to-deliver-critical-coding-module-to-mask-personal-identifying-information-in-a-compliant-and-safe-manner/',
 'https://blog.langchain.dev/llms-accelerate-adyens-support-team-through-smart-ticket-routing-and-support-agent-copilot/',
 'https://blog.langchain.dev/langchain-partners-with-elastic-to-launch-the-elastic-ai-assistant/',
 '/langsmith',
 '/contact-sales',
 'https://smith.langchain.com/',
 '/langchain',
 '/langsmith',
 '/langgraph',
 '/agents',
 '/evaluation',
 '/retrieval',
 'https://python.langchain.com/',
 'https://js.langchain.com/docs/get_started/introduction/',
 'https://github.com/langchain-ai',
 'https://python.langchain.com/docs/integrations/providers/',
 'https://changelog.langchain.com/',
 '/join-community',
 'https://trust.langchain.com/',
 '/about',
 '/careers',
 'https://blog.langchain.dev/',
 'https://twitter.com/LangChainAI',
 'https://www.linkedin.com/company/langchain/',
 'https://www.youtube.com/@LangChain',
 'https://drive.google.com/drive/folders/17xybjzmVBdsQA-VxouuGLxF6bDsHDe80?usp=sharing',
 'https://status.smith.langchain.com/',
 '/privacy-policy',
 '/terms-of-service']

print(filter_relevant_links(urls))